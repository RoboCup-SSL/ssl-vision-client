// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: visualization/ssl_visualization.proto

package visualization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Color encoded in RGB
type RgbColor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// red (0-255)
	R uint32 `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	// green (0-255)
	G uint32 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	// blue (0-255)
	B uint32 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	// alpha (0.0-1.0)
	A             float32 `protobuf:"fixed32,4,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RgbColor) Reset() {
	*x = RgbColor{}
	mi := &file_visualization_ssl_visualization_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RgbColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RgbColor) ProtoMessage() {}

func (x *RgbColor) ProtoReflect() protoreflect.Message {
	mi := &file_visualization_ssl_visualization_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RgbColor.ProtoReflect.Descriptor instead.
func (*RgbColor) Descriptor() ([]byte, []int) {
	return file_visualization_ssl_visualization_proto_rawDescGZIP(), []int{0}
}

func (x *RgbColor) GetR() uint32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *RgbColor) GetG() uint32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *RgbColor) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *RgbColor) GetA() float32 {
	if x != nil {
		return x.A
	}
	return 0
}

// Metadata for each shape
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// layer name, optionally with a hierarchy
	Layer []string `protobuf:"bytes,1,rep,name=layer,proto3" json:"layer,omitempty"`
	// Should a client show this by default?
	VisibleByDefault bool `protobuf:"varint,2,opt,name=visibleByDefault,proto3" json:"visibleByDefault,omitempty"`
	// An order number:
	// <0: Below field lines
	// 0: default
	// 1: robots
	// 2: robot ids
	// 3: ball
	// >3: above vision objects
	Order int32 `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	// Color to fill the shape
	ColorFill *RgbColor `protobuf:"bytes,4,opt,name=color_fill,json=colorFill,proto3" json:"color_fill,omitempty"`
	// Color for the shape stroke
	ColorStroke   *RgbColor `protobuf:"bytes,5,opt,name=color_stroke,json=colorStroke,proto3" json:"color_stroke,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_visualization_ssl_visualization_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_visualization_ssl_visualization_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_visualization_ssl_visualization_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetLayer() []string {
	if x != nil {
		return x.Layer
	}
	return nil
}

func (x *Metadata) GetVisibleByDefault() bool {
	if x != nil {
		return x.VisibleByDefault
	}
	return false
}

func (x *Metadata) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Metadata) GetColorFill() *RgbColor {
	if x != nil {
		return x.ColorFill
	}
	return nil
}

func (x *Metadata) GetColorStroke() *RgbColor {
	if x != nil {
		return x.ColorStroke
	}
	return nil
}

// A line segment
type LineSegment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The metadata
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Start point, x value [m]
	StartX float32 `protobuf:"fixed32,2,opt,name=start_x,json=startX,proto3" json:"start_x,omitempty"`
	// Start point, y value [m]
	StartY float32 `protobuf:"fixed32,3,opt,name=start_y,json=startY,proto3" json:"start_y,omitempty"`
	// End point, x value [m]
	EndX float32 `protobuf:"fixed32,4,opt,name=end_x,json=endX,proto3" json:"end_x,omitempty"`
	// End point, y value [m]
	EndY          float32 `protobuf:"fixed32,5,opt,name=end_y,json=endY,proto3" json:"end_y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LineSegment) Reset() {
	*x = LineSegment{}
	mi := &file_visualization_ssl_visualization_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineSegment) ProtoMessage() {}

func (x *LineSegment) ProtoReflect() protoreflect.Message {
	mi := &file_visualization_ssl_visualization_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineSegment.ProtoReflect.Descriptor instead.
func (*LineSegment) Descriptor() ([]byte, []int) {
	return file_visualization_ssl_visualization_proto_rawDescGZIP(), []int{2}
}

func (x *LineSegment) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LineSegment) GetStartX() float32 {
	if x != nil {
		return x.StartX
	}
	return 0
}

func (x *LineSegment) GetStartY() float32 {
	if x != nil {
		return x.StartY
	}
	return 0
}

func (x *LineSegment) GetEndX() float32 {
	if x != nil {
		return x.EndX
	}
	return 0
}

func (x *LineSegment) GetEndY() float32 {
	if x != nil {
		return x.EndY
	}
	return 0
}

// A full circle
type Circle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The metadata
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Center point, x value [m]
	CenterX float32 `protobuf:"fixed32,2,opt,name=center_x,json=centerX,proto3" json:"center_x,omitempty"`
	// Center point, y value [m]
	CenterY float32 `protobuf:"fixed32,3,opt,name=center_y,json=centerY,proto3" json:"center_y,omitempty"`
	// Radius [m]
	Radius        float32 `protobuf:"fixed32,4,opt,name=radius,proto3" json:"radius,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Circle) Reset() {
	*x = Circle{}
	mi := &file_visualization_ssl_visualization_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle) ProtoMessage() {}

func (x *Circle) ProtoReflect() protoreflect.Message {
	mi := &file_visualization_ssl_visualization_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle.ProtoReflect.Descriptor instead.
func (*Circle) Descriptor() ([]byte, []int) {
	return file_visualization_ssl_visualization_proto_rawDescGZIP(), []int{3}
}

func (x *Circle) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Circle) GetCenterX() float32 {
	if x != nil {
		return x.CenterX
	}
	return 0
}

func (x *Circle) GetCenterY() float32 {
	if x != nil {
		return x.CenterY
	}
	return 0
}

func (x *Circle) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// Wrapper frame containing all shapes
type VisualizationFrame struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier for the sender
	// Used to identify the source of shapes in a client
	// Also used to keep track of the latest frame of each sender in clients, if there a multiple ones senders
	SenderId string `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// all lines
	Lines []*LineSegment `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
	// all circles
	Circles       []*Circle `protobuf:"bytes,3,rep,name=circles,proto3" json:"circles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VisualizationFrame) Reset() {
	*x = VisualizationFrame{}
	mi := &file_visualization_ssl_visualization_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VisualizationFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualizationFrame) ProtoMessage() {}

func (x *VisualizationFrame) ProtoReflect() protoreflect.Message {
	mi := &file_visualization_ssl_visualization_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualizationFrame.ProtoReflect.Descriptor instead.
func (*VisualizationFrame) Descriptor() ([]byte, []int) {
	return file_visualization_ssl_visualization_proto_rawDescGZIP(), []int{4}
}

func (x *VisualizationFrame) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *VisualizationFrame) GetLines() []*LineSegment {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *VisualizationFrame) GetCircles() []*Circle {
	if x != nil {
		return x.Circles
	}
	return nil
}

var File_visualization_ssl_visualization_proto protoreflect.FileDescriptor

var file_visualization_ssl_visualization_proto_rawDesc = []byte{
	0x0a, 0x25, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x73, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x08, 0x52, 0x67, 0x62, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x67, 0x12,
	0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a,
	0x01, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x61, 0x22, 0xba, 0x01, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x67, 0x62, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x52, 0x67, 0x62, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x59, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x65, 0x6e, 0x64, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x5f, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x65, 0x6e, 0x64, 0x59, 0x22, 0x7d, 0x0a, 0x06, 0x43,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x58, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x59, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x12, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x73, 0x42, 0x5a, 0x42, 0x15, 0x53, 0x73, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x62, 0x6f,
	0x43, 0x75, 0x70, 0x2d, 0x53, 0x53, 0x4c, 0x2f, 0x73, 0x73, 0x6c, 0x2d, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_visualization_ssl_visualization_proto_rawDescOnce sync.Once
	file_visualization_ssl_visualization_proto_rawDescData = file_visualization_ssl_visualization_proto_rawDesc
)

func file_visualization_ssl_visualization_proto_rawDescGZIP() []byte {
	file_visualization_ssl_visualization_proto_rawDescOnce.Do(func() {
		file_visualization_ssl_visualization_proto_rawDescData = protoimpl.X.CompressGZIP(file_visualization_ssl_visualization_proto_rawDescData)
	})
	return file_visualization_ssl_visualization_proto_rawDescData
}

var file_visualization_ssl_visualization_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_visualization_ssl_visualization_proto_goTypes = []any{
	(*RgbColor)(nil),           // 0: RgbColor
	(*Metadata)(nil),           // 1: Metadata
	(*LineSegment)(nil),        // 2: LineSegment
	(*Circle)(nil),             // 3: Circle
	(*VisualizationFrame)(nil), // 4: VisualizationFrame
}
var file_visualization_ssl_visualization_proto_depIdxs = []int32{
	0, // 0: Metadata.color_fill:type_name -> RgbColor
	0, // 1: Metadata.color_stroke:type_name -> RgbColor
	1, // 2: LineSegment.metadata:type_name -> Metadata
	1, // 3: Circle.metadata:type_name -> Metadata
	2, // 4: VisualizationFrame.lines:type_name -> LineSegment
	3, // 5: VisualizationFrame.circles:type_name -> Circle
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_visualization_ssl_visualization_proto_init() }
func file_visualization_ssl_visualization_proto_init() {
	if File_visualization_ssl_visualization_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_visualization_ssl_visualization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_visualization_ssl_visualization_proto_goTypes,
		DependencyIndexes: file_visualization_ssl_visualization_proto_depIdxs,
		MessageInfos:      file_visualization_ssl_visualization_proto_msgTypes,
	}.Build()
	File_visualization_ssl_visualization_proto = out.File
	file_visualization_ssl_visualization_proto_rawDesc = nil
	file_visualization_ssl_visualization_proto_goTypes = nil
	file_visualization_ssl_visualization_proto_depIdxs = nil
}
